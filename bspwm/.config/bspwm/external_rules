#!/bin/sh
#
# external_rules_command
#
# Absolute path to the command used to retrieve rule consequences.
# The command will receive the following arguments: window ID, class
# name, instance name, and intermediate consequences. The output of
# that command must have the following format: key1=value1
# key2=value2 ...  (the valid key/value pairs are given in the
# description of the rule command).
#
#
# Rule
#    General Syntax
# 	   rule COMMANDS
#
#    Commands
# 	   -a, --add (<class_name>|*)[:(<instance_name>|*)] [-o|--one-shot]
# 	   [monitor=MONITOR_SEL|desktop=DESKTOP_SEL|node=NODE_SEL]
# 	   [state=STATE] [layer=LAYER] [split_dir=DIR] [split_ratio=RATIO]
# 	   [(hidden|sticky|private|locked|marked|center|follow|manage|focus|border)=(on|off)]
# 	   [rectangle=WxH+X+Y]
# 		   Create a new rule.
#
# 	   -r, --remove
# 	   ^<n>|head|tail|(<class_name>|*)[:(<instance_name>|*)]...
# 		   Remove the given rules.
#
# 	   -l, --list
# 		   List the rules.

border='' \
    center='' \
    class=${2} \
    desktop='' \
    focus='' \
    follow='' \
    hidden='' \
    id=${1?} \
    instance=${3} \
    layer='' \
    locked='' \
    manage='' \
    marked='' \
    misc=${4} \
    monitor='' \
    node='' \
    private='' \
    rectangle='' \
    split_dir='' \
    split_ratio='' \
    state='' \
    sticky='' \
    urgent=''

convert_to_seconds() {
    local time_str="$1"
    local total_seconds=0

    if [[ "$time_str" =~ ([0-9]+)-([0-9]{2}):([0-9]{2}):([0-9]{2}) ]]; then
        days=${BASH_REMATCH[1]}
        hours=${BASH_REMATCH[2]}
        minutes=${BASH_REMATCH[3]}
        seconds=${BASH_REMATCH[4]}
        total_seconds=$((days * 86400 + hours * 3600 + minutes * 60 + seconds))
    elif [[ "$time_str" =~ ([0-9]{2}):([0-9]{2}):([0-9]{2}) ]]; then
        hours=${BASH_REMATCH[1]}
        minutes=${BASH_REMATCH[2]}
        seconds=${BASH_REMATCH[3]}
        total_seconds=$((hours * 3600 + minutes * 60 + seconds))
    elif [[ "$time_str" =~ ([0-9]{1,2}):([0-9]{2}) ]]; then
        minutes=${BASH_REMATCH[1]}
        seconds=${BASH_REMATCH[2]}
        total_seconds=$((minutes * 60 + seconds))
    elif [[ "$time_str" =~ ([0-9]+) ]]; then
        seconds=${BASH_REMATCH[1]}
        total_seconds=$seconds
    fi

    echo "$total_seconds"
}

is_running_longer_than() {
  local process_name=$1
  local threshold_seconds=$2

  # Get the PID of the process with the given name
  local process_id=$(pgrep -f "$process_name")

  # Check if a PID was found
  if [ -z "$process_id" ]; then
    echo "false"
    return
  fi

  # Get the elapsed time of the process
  local elapsed_time=$(ps -o etime= -p "$process_id" | tr -d ' ')

  # Check if elapsed_time is empty or not valid
  if [ -z "$elapsed_time" ] || [[ ! "$elapsed_time" =~ ^[0-9] ]]; then
    echo "false"
    return
  fi

  # Convert elapsed time to seconds
  local elapsed_seconds=$(convert_to_seconds "$elapsed_time")

  # Check if the elapsed time is greater than the threshold
  if [ "$elapsed_seconds" -gt "$threshold_seconds" ]; then
    echo "true"
  else
    echo "false"
  fi
}

firefox() {
    desktop=^1
}

gimp() {
    desktop=^8
    follow=on
}

zathura() {
    state=tiled
}

discord() {
    desktop="6"
    follow=off
    state=pseudo_tiled
    rectangle=1850x1000+0+0
    # bspc config ignore_ewmh_focus true
    # (
    #     sleep 5
    #     bspc config ignore_ewmh_focus false
    # ) &
}

ranger() {
    state=pseudo_tiled
    rectangle=1200x800+0+0
    center=true
}

teams() {
    state=tiled
    desktop=^8
}

matplotlib() {
    # desktop=^2
    state=floating
    # state=tiled
}

qbittorrent() {
    desktop='^7'
    follow=on
    case $(xprop -id "$id" WM_NAME) in
    *qBittorrent*) state=tiled ;;
    *) state=floating ;;
    esac
}

spotify() {
    desktop=^5
    rectangle=1800x1000+0+0
    state=pseudo_tiled
}

telegram_desktop() {
    desktop=^3
}

chromium() {
    desktop=^2
}

matlab() {
    desktop=^4
}

steam() {
    desktop=^7
}

mpv() {
    desktop=^7
    state=floating
    layer=normal
    rectangle=1200x800+0+0
    center=true
    follow=on
}

whatsie() {
    desktop=^10
}

nautilus() {
    desktop='^10'
    state=pseudo_tiled
    rectangle=1024x640+0+0
    center=on
    follow=on
    hidden=on
}

deno() {
    state=tiled
}

localsend() {
    if [ "$(is_running_longer_than "localsend" "3")" = "true" ]; then
        hidden=off
    else
        hidden=on
    fi
}
bitwarden() {
    if [ "$(is_running_longer_than "bitwarden" "3")" = "true" ]; then
        hidden=off
    else
        hidden=on
    fi
}

case $instance.$class in
*.MATLAB*) matlab ;;
*.Matplotlib) matplotlib ;;
*.Localsend) localsend;;
*.Deno) deno ;;
*.Nautilus) nautilus ;;
*.Spotify) spotify ;;
*.Zathura) zathura ;;
*.discord) discord ;;
*.steam) steam ;;
*.matplotlib) matplotlib ;;
*.Bitwarden) bitwarden ;;
*.mpv) mpv ;;
*.qBittorrent) qbittorrent ;;
*Teams*) teams ;;
*WhatSie) whatsie ;;
Ranger.Ranger) ranger ;;
.)
    case $(ps -p "$(xdo pid "$id")" -o comm= 2>/dev/null) in
    spotify) spotify ;;
    esac
    ;;
esac

# printf "id: ${1} class: ${2} instance: ${3} misc: ${4} \n" > /home/tiagovla/.config/bspwm/external_rules.log
printf '%s' \
    ${border:+"border=$border "} \
    ${center:+"center=$center "} \
    ${desktop:+"desktop=$desktop "} \
    ${focus:+"focus=$focus "} \
    ${follow:+"follow=$follow "} \
    ${hidden:+"hidden=$hidden "} \
    ${layer:+"layer=$layer "} \
    ${locked:+"locked=$locked "} \
    ${manage:+"manage=$manage "} \
    ${marked:+"marked=$marked "} \
    ${monitor:+"monitor=$monitor "} \
    ${node:+"node=$node "} \
    ${private:+"private=$private "} \
    ${rectangle:+"rectangle=$rectangle "} \
    ${split_dir:+"split_dir=$split_dir "} \
    ${split_ratio:+"split_ratio=$split_ratio "} \
    ${state:+" state=$state "} \
    ${sticky:+"sticky=$sticky "} \
    ${urgent:+"urgent=$urgent "}

# vim: set ft=sh
